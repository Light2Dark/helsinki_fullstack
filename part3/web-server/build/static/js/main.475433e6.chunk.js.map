{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","length","notesToShow","filter","map","find","n","changedNote","returnedNote","noteHere","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.475433e6.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Note = ({note, toggleImportance}) => {\r\n    const label = note.important ? 'make not important' : 'make important'\r\n\r\n    return (\r\n        <li className = \"note\">\r\n            {note.content}\r\n            <button onClick = {toggleImportance}>{label}</button>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default Note","import axios from 'axios'\r\n// const baseUrl = \"http://localhost:3001/api/notes\"\r\nconst baseUrl = \"https://calm-island-77208.herokuapp.com/api/notes\"\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    \r\n    const nonExisting = {\r\n        id: 10000,\r\n        content: 'This note is not saved to server',\r\n        date: '2019-05-30T17:30:31.098Z',\r\n        important: true,\r\n      }\r\n\r\n    return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\n// we returning the response data not the promise directly\r\n\r\nexport default { getAll, create, update }\r\n// same as getAll: getAll. since the names are the same, we can export like this","const Notification = ({message}) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className = \"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, {useState, useEffect} from 'react'\nimport Note from './components/Note'\nimport noteService from './services/notes'\nimport Notification from './components/Notification'\nimport './index.css'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n\n  return <div style = {footerStyle}>\n    <br />\n    <em>Note app, Department of Computer Science, Helsinki Unversity 2021</em>\n  </div>\n}\n\nconst App = () => {\n  // const {notes} = props // {notes} refers to props.notes\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  const hook = () => {\n    console.log(\"effect\")\n    noteService\n      .getAll()\n      .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n\n      // const promise = axios.get(\"...\")\n      // promise.then(eventHandler)\n  }\n\n  useEffect(hook, []) // does not get called second time bcs [] does not change\n  console.log(\"render\", notes.length, \"notes\")\n\n  const addNote = (event) => {\n    event.preventDefault()\n    if (newNote === \"\") return\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() < 0.5,\n      // id: notes.length + 1\n    }\n    // setNotes(notes.concat(noteObject))\n    // setNewNote(\"\")\n\n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote(\"\")\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id) // return note which has note.id ==== id\n    const changedNote = {...note, important: !note.important}\n    // `importance of ${id} needs to be toggled`\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(noteHere => noteHere.id !== id ? noteHere : returnedNote)) // create a new array, map all items from old array into new array\n      }) \n      .catch(error => {\n        setErrorMessage(\n          `Note '${note.content}' was already removed from the server`\n        )\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id)) // returns a new array where the items in the list pass the parameter, so if id of this non existent note is 1000, return all the notes that are not 1000\n      })\n    }\n\n  const notesToShow = showAll ? notes : notes.filter(note => note.important)\n  // same as note => note.important === true\n\n  return (\n    <div>\n      <Notification message = {errorMessage} />\n      <h1>Notes</h1>\n      <div>\n        <button onClick = {() => setShowAll(!showAll)}>\n          Show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key = {note.id} note = {note} toggleImportance ={() => {toggleImportanceOf(note.id)}} />\n        )}\n      </ul>\n      {/* <ul> \n        {notes.map(note => \n          <Note key = {note.id} note = {note} />\n        )}\n      </ul> */}\n      <form onSubmit = {addNote}>\n        <input value = {newNote} onChange = {handleNoteChange} /> \n        <button type = \"submit\">Save</button>\n      </form>\n\n      <Footer />\n    </div>\n  )\n} \n\n// bcs Javascript thats why wrap in {}\n// anti-pattern: notes.map((note, index) => {}) however dont use this\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App.js'\nimport axios from 'axios'\n\n// const promise = axios.get(\"http://localhost:3001/notes\")\n// promise.then(response => console.log(response))\n\naxios\n  .get(\"http://localhost:3001/notes\")\n  .then(response => {\n    const notes = response.data\n    console.log(notes)\n  })\n\n\n// const promise2 = axios.get(\"http://localhost:3001/foobar\")\n// console.log(promise2); will be rejected promise\n\nReactDOM.render(\n  <App/>,\n  document.getElementById(\"root\")\n);\n\n// XHR method OBSOLETE\n// const xhttp = new XMLHttpRequest()\n\n// xhttp.onreadystatechange = function() {    --event handler obj to rep HTTP Req.\n//   if (this.readyState == 4 && this.status == 200) {\n//     const data = JSON.parse(this.responseText)\n//     // handle the response that is saved in variable data\n//   }\n// }\n\n// xhttp.open('GET', '/data.json', true)\n// xhttp.send() asynchronous call of func\n"],"sourceRoot":""}